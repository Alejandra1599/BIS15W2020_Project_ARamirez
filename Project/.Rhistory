summarise(Longest_Proteins= max(Length))%>%
arrange(Longest_Proteins)
nucseq%>%
select(Protein, Length)%>%
group_by(Protein)%>%
summarise(Longest_Proteins= max(Length))%>%
arrange(desc(Longest_Proteins))
nucseq%>%
select(Protein, Length)%>%
group_by(Protein)%>%
summarise(Longest_Proteins= max(Length))%>%
arrange(desc(Longest_Proteins))%>%
count(Protein)
nucseq%>%
select(Protein, Length)%>%
group_by(Protein)%>%
summarise(Longest_Proteins= max(Length))%>%
arrange(desc(Longest_Proteins))
Protein_length <- nucseq%>%
select(Protein, Length)%>%
group_by(Protein)%>%
summarise(Longest_Proteins= max(Length))%>%
arrange(desc(Longest_Proteins))
Protein_length <- nucseq%>%
select(Protein, Length)%>%
group_by(Protein)%>%
summarise(Longest_Proteins= max(Length))%>%
arrange(desc(Longest_Proteins))
Protein_length
Protein_length%>%
mutate(Count= count(Protein))
unique(Protein)
nucseq%>%
unique(Protein)
nucseq%>%
unique(Protein)
unique(nucseq$Protein)
Protein_length%>%
mutate(Count= count(Protein, stat= "identity"))
Protein_length%>%
mutate(Count= count(Protein, stat= "identity"))
Protein_length%>%
mutate(Count= count(Longest_Proteins, stat= "identity"))
Protein_length%>%
mutate(Count= count(Longest_Proteins, stat= "identity"))
Protein_length%>%
mutate(Count= count(Longest_Proteins, stat= "identity"))
Protein_length%>%
mutate(Count= count(Longest_Proteins))
Protein_length%>%
mutate(Count= count(Longest_Proteins))
Protein_length%>%
mutate(Count= count(Longest_Proteins))
Protein_length%>%
mutate(Count= count(Longest_Proteins))
Protein_length%>%
mutate(Count= count(Longest_Proteins))
Protein_length <- nucseq%>%
select(Protein, Length)%>%
tolower(Protein)%>%
group_by(Protein)%>%
summarise(Longest_Proteins= max(Length))%>%
arrange(desc(Longest_Proteins))
Protein_length%>%
mutate(Proteins= tolower(Proteins))
Protein_length%>%
mutate(Protein= tolower(Protein))
Protein_length <- nucseq%>%
select(Protein, Length)%>%
tolower(Protein)%>%
group_by(Protein)%>%
summarise(Longest_Proteins= max(Length))%>%
arrange(desc(Longest_Proteins))
Protein_length <- nucseq%>%
select(Protein, Length)%>%
group_by(Protein)%>%
summarise(Longest_Proteins= max(Length))%>%
arrange(desc(Longest_Proteins))
Protein_length
nucseq <-
nucseq%>%
mutate(Protein= tolower(Protein))
nucseq <-
nucseq%>%
mutate(Protein= tolower(Protein))
nucseq
Protein_length <- nucseq%>%
select(Protein, Length)%>%
group_by(Protein)%>%
summarise(Longest_Proteins= max(Length))%>%
arrange(desc(Longest_Proteins))
Protein_length
unique(nucseq$Protein)
Protein_length <- nucseq%>%
select(Protein, Length)%>%
group_by(Protein)%>%
summarise(Longest_Proteins= max(Length, Count= nchar(Protein)))%>%
arrange(desc(Longest_Proteins))
Protein_length
Protein_length <- nucseq%>%
select(Protein, Length)%>%
group_by(Protein)%>%
summarise(Longest_Proteins= max(Length, Count= nchar(unique(nucseq$Protein)))%>%
arrange(desc(Longest_Proteins))
Protein_length
Protein_length <- nucseq%>%
select(Protein, Length)%>%
group_by(Protein)%>%
summarise(Longest_Proteins= max(Length, Count= nchar(unique(nucseq$Protein)))%>%
arrange(desc(Longest_Proteins))
Protein_length
Protein_length <- nucseq%>%
select(Protein, Length)%>%
group_by(Protein)%>%
summarise(Longest_Proteins= max(Length, Count= nchar(unique(nucseq$Protein))))%>%
arrange(desc(Longest_Proteins))
Protein_length
Protein_length <- nucseq%>%
select(Protein, Length)%>%
group_by(Protein)%>%
summarise(Longest_Proteins= max(Length,
Count= nchar(unique(nucseq$Protein))))%>%
arrange(desc(Longest_Proteins))
Protein_length
Protein_length <- nucseq%>%
select(Protein, Length)%>%
group_by(Protein)%>%
summarise(Count= nchar(unique(nucseq$Protein))))%>%
Protein_length <- nucseq%>%
select(Protein, Length)%>%
group_by(Protein)%>%
summarise(Count= nchar(unique(nucseq$Protein)))%>%
arrange(desc(Longest_Proteins))
Protein_length <- nucseq%>%
select(Protein, Length)%>%
group_by(Protein)%>%
summarise(Longest_Proteins= max(Length))%>%
arrange(desc(Longest_Proteins))
Protein_length
Protein_length <- nucseq%>%
select(Protein, Length)%>%
group_by(Protein)%>%
summarise(Longest_Proteins= max(Length), nchar(Protein))%>%
arrange(desc(Longest_Proteins))
Protein_length <- nucseq%>%
select(Protein, Length)%>%
group_by(Protein)%>%
summarise(Longest_Proteins= max(Length), nchar(Protein))%>%
arrange(desc(Longest_Proteins))
Protein_length <- nucseq%>%
select(Protein, Length)%>%
group_by(Protein)%>%
summarise(Longest_Proteins= max(Length), Count= names(Protein))%>%
arrange(desc(Longest_Proteins))
Protein_length <- nucseq%>%
select(Protein, Length)%>%
group_by(Protein)%>%
summarise(Longest_Proteins= max(Length), Count= table(names(Protein)))%>%
arrange(desc(Longest_Proteins))
Protein_length <- nucseq%>%
select(Protein, Length)%>%
group_by(Protein)%>%
summarise(Longest_Proteins= max(Length), Count= table(names(Protein)))%>%
arrange(desc(Longest_Proteins))
Protein_length <- nucseq%>%
select(Protein, Length)%>%
group_by(Protein)%>%
summarise(Longest_Proteins= max(Length), Count= table(names(Protein)))%>%
arrange(desc(Longest_Proteins))
Protein_length <- nucseq%>%
select(Protein, Length)%>%
group_by(Protein)%>%
summarise(Longest_Proteins= max(Length), Count= table(names(Protein)))%>%
arrange(desc(Longest_Proteins))
Protein_length <- nucseq%>%
select(Protein, Length)%>%
group_by(Protein)%>%
summarise(Longest_Proteins= max(Length), Count= table(names(Protein)))%>%
arrange(desc(Longest_Proteins))
Protein_length <- nucseq%>%
select(Protein, Length)%>%
group_by(Protein)%>%
summarise(Longest_Proteins= max(Length), Count= table(names(Protein)))%>%
arrange(desc(Longest_Proteins))
knitr::opts_chunk$set(echo = TRUE)
library(tidyverse)
Kaggle <- readr::read_csv("/Users/aleram15/Documents/GitHub/BIS15W2020_Project_ARamirez/Project/Kaggledata.csv")
nucseq <- readr::read_csv("/Users/aleram15/Documents/GitHub/BIS15W2020_Project_ARamirez/Project/sequences.csv")
getwd()
nucseq <-
nucseq%>%
mutate(Protein= tolower(Protein))
nucseq
Protein_length <- nucseq%>%
select(Protein, Length)%>%
group_by(Protein)%>%
summarise(Longest_Proteins= max(Length), Count= table(names(Protein)))%>%
arrange(desc(Longest_Proteins))
install.packages(c("dplyr", "fs", "plyr"))
install.packages(c("dplyr", "fs", "plyr"))
install.packages(c("dplyr", "fs", "plyr"))
install.packages(c("dplyr", "fs", "plyr"))
install.packages(c("dplyr", "fs", "plyr"))
install.packages(c("dplyr", "fs", "plyr"))
install.packages(c("dplyr", "fs", "plyr"))
knitr::opts_chunk$set(echo = TRUE)
Protein_length <- nucseq%>%
select(Protein, Length)%>%
group_by(Protein)%>%
summarise(Longest_Proteins= max(Length))%>%
arrange(desc(Longest_Proteins))
Protein_length <- nucseq%>%
select(Protein, Length)%>%
group_by(Protein)%>%
summarise(Longest_Proteins= max(Length))%>%
arrange(desc(Longest_Proteins))
Protein_length <- nucseq%>%
select(Protein, Length)%>%
group_by(Protein)%>%
summarise(Longest_Proteins= max(Length))%>%
arrange(desc(Longest_Proteins))
library(tidyverse)
Protein_length <- nucseq%>%
select(Protein, Length)%>%
group_by(Protein)%>%
summarise(Longest_Proteins= max(Length))%>%
arrange(desc(Longest_Proteins))
Protein_length
Protein_length <- nucseq%>%
select(Protein, Length)%>%
group_by(Protein)%>%
summarise(Longest_Proteins= max(Length))%>%
arrange(desc(Longest_Proteins))
Protein_length
unique(nucseq$Protein)
ggplot(data = nucseq, aes(x=Isolation_Source, fill= Isolation_Source))+
geom_bar()+
coord_flip()
nucseq%>%
ggplot(aes(x=Isolation_Source, fill= Isolation_Source))+
geom_bar()+
coord_flip()
nucseq%>%
ggplot(aes(x=Isolation_Source, fill= Isolation_Source))+
geom_bar()+
coord_flip()+
labs(title = "Isolation Source")
nucseq%>%
ggplot(aes(x=Isolation_Source, fill= Isolation_Source))+
geom_bar()+
coord_flip()+
labs(title = "Isolation Source")+
theme(plot.title = element_text(size = 18, face = "bold"),
axis.text = element_text(size = 12),
axis.title = element_text(size = 12))
nucseq%>%
ggplot(aes(x=Isolation_Source, fill= Isolation_Source))+
geom_bar()+
coord_flip()+
labs(title = "Isolation Source")+
theme(plot.title = element_text(size = 18, face = "bold", hjust = .5),
axis.text = element_text(size = 12),
axis.title = element_text(size = 12))
Protein_length <- nucseq%>%
select(Protein, Length)%>%
group_by(Protein)%>%
summarise(Longest_Proteins= max(Length))%>%
mutate(Number_present= nchar(Protein))
arrange(desc(Longest_Proteins))
Protein_length <- nucseq%>%
select(Protein, Length)%>%
group_by(Protein)%>%
summarise(Longest_Proteins= max(Length))%>%
mutate(Number_present= nchar(Protein))%>%
arrange(desc(Longest_Proteins))
Protein_length
Protein_length <- nucseq%>%
select(Protein, Length)%>%
group_by(Protein)%>%
summarise(Longest_Proteins= max(Length))%>%
mutate(count= nchar(Protein))%>%
arrange(desc(Longest_Proteins))
Protein_length
Protein_length <- nucseq%>%
select(Protein, Length)%>%
group_by(Protein)%>%
summarise(Longest_Proteins= max(Length))%>%
mutate(Count= nchar(Protein))%>%
arrange(desc(Longest_Proteins))
Protein_length
Protein_length <- nucseq%>%
select(Protein, Length)%>%
group_by(Protein)%>%
summarise(Longest_Proteins= max(Length))%>%
mutate(Count= nchar(Protein))%>%
arrange(desc(Longest_Proteins))
Protein_length
Protein_length%>%
ggplot(aes(x= Protein, y= Count, size= Longest_Proteins))+
geom_point()
Protein_length%>%
ggplot(aes(x= Protein, y= Count, size= Longest_Proteins))+
geom_point()+
coord_flip()
Protein_length <- nucseq%>%
select(Protein, Length)%>%
group_by(Protein)%>%
summarise(Longest_Proteins= max(Length))%>%
mutate(Count= nchar(Protein))%>%
arrange(desc(Longest_Proteins))%>%
arrange(desc(Count))
Protein_length
Protein_length <- nucseq%>%
select(Protein, Length)%>%
group_by(Protein)%>%
summarise(Longest_Proteins= max(Length))%>%
mutate(Count= nchar(Protein))%>%
arrange(desc(Longest_Proteins))
Protein_length
library(tidyverse)
library(shiny)
install.packages("shiny")
library(tidyverse)
library(shiny)
Kaggle
install.packages("shiny")
install.packages("shinydashboard")
knitr::opts_chunk$set(echo = TRUE)
library(tidyverse)
library(shiny)
library(shinydashboard)
install.packages("shinydashboard")
library(tidyverse)
library(shiny)
library(shinydashboard)
names(Kaggle)
ui <- dashboardPage(
dashboardHeader(title = "Kaggle App"),
dashboardSidebar(),
dashboardBody(
selectInput("x", "Select X Variable", choices = c("Province/State", "Country"),
selected = "Province/State"),
selectInput("y", "Select Y Variable", choices = c("Deaths", "Suspected", "Confirmed"),
selected = "Confirmed"),
sliderInput("pointsize", "Select the Point Size", min = 1, max = 5, value = 2, step = 0.5),
plotOutput("plot", width = "500px", height = "400px"))
)
server <- function(input, output, session) {
# the code to make the plot of iris data grouped by species
output$plot <- renderPlot({
ggplot(iris, aes_string(x = input$x, y = input$y)) +
geom_bar(stat = "identity") + theme_light(base_size = 18)
})
# stop the app when we close it
session$onSessionEnded(stopApp)
}
shinyApp(ui, server)
ui <- dashboardPage(
dashboardHeader(title = "Kaggle App"),
dashboardSidebar(),
dashboardBody(
selectInput("x", "Select X Variable", choices = c("Province/State", "Country"),
selected = "Province/State"),
selectInput("y", "Select Y Variable", choices = c("Deaths", "Suspected", "Confirmed"),
selected = "Confirmed"),
sliderInput("pointsize", "Select the Point Size", min = 1, max = 5, value = 2, step = 0.5),
plotOutput("plot", width = "500px", height = "400px"))
)
server <- function(input, output, session) {
# the code to make the plot of iris data grouped by species
output$plot <- renderPlot({
ggplot(Kaggle, aes_string(x = input$x, y = input$y)) +
geom_bar(stat = "identity") + theme_light(base_size = 18)
})
# stop the app when we close it
session$onSessionEnded(stopApp)
}
shinyApp(ui, server)
ui <- dashboardPage(
dashboardHeader(title = "Kaggle App"),
dashboardSidebar(),
dashboardBody(
selectInput("x", "Select X Variable", choices = c("Province/State", "Country"),
selected = "Province/State"),
selectInput("y", "Select Y Variable", choices = c("Deaths", "Suspected", "Confirmed"),
selected = "Confirmed"),
sliderInput("pointsize", "Select the Point Size", min = 1, max = 5, value = 2, step = 0.5),
plotOutput("plot", width = "500px", height = "400px"))
)
server <- function(input, output, session) {
# the code to make the plot of iris data grouped by species
output$plot <- renderPlot({
ggplot(Kaggle, aes_string(x = input$x, y = input$y)) +
geom_bar() + theme_light(base_size = 18)
})
# stop the app when we close it
session$onSessionEnded(stopApp)
}
shinyApp(ui, server)
ui <- dashboardPage(
dashboardHeader(title = "Kaggle App"),
dashboardSidebar(),
dashboardBody(
selectInput("x", "Select X Variable", choices = c("Province/State", "Country"),
selected = "Province/State"),
selectInput("y", "Select Y Variable", choices = c("Deaths", "Suspected", "Confirmed"),
selected = "Confirmed"),
sliderInput("pointsize", "Select the Point Size", min = 1, max = 5, value = 2, step = 0.5),
plotOutput("plot", width = "500px", height = "400px"))
)
server <- function(input, output, session) {
# the code to make the plot of iris data grouped by species
output$plot <- renderPlot({
ggplot(Kaggle, aes_string(x = input$x, y = input$y)) +
geom_bar(stat = "identity") + theme_light(base_size = 18)
})
# stop the app when we close it
session$onSessionEnded(stopApp)
}
shinyApp(ui, server)
library(tidyverse)
library(shiny)
library(shinydashboard)
library(naniar)
install.packages("naniar")
library(tidyverse)
library(shiny)
library(shinydashboard)
library(naniar)
ui <- dashboardPage(
dashboardHeader(title = "Kaggle App"),
dashboardSidebar(),
dashboardBody(
selectInput("x", "Select X Variable", choices = c("Province/State", "Country"),
selected = "Province/State"),
selectInput("y", "Select Y Variable", choices = c("Deaths", "Suspected", "Confirmed"),
selected = "Confirmed"),
sliderInput("pointsize", "Select the Point Size", min = 1, max = 5, value = 2, step = 0.5),
plotOutput("plot", width = "500px", height = "400px"))
)
server <- function(input, output, session) {
# the code to make the plot of iris data grouped by species
output$plot <- renderPlot({
ggplot(Kaggle, aes_string(x = input$x, y = input$y)) +
geom_bar(stat = "identity") + theme_light(base_size = 18)
})
# stop the app when we close it
session$onSessionEnded(stopApp)
}
shinyApp(ui, server)
ui <- dashboardPage(
dashboardHeader(title = "Kaggle App"),
dashboardSidebar(),
dashboardBody(
selectInput("x", "Select X Variable", choices = c("Province/State", "Country"),
selected = "Province/State"),
selectInput("y", "Select Y Variable", choices = c("Deaths", "Suspected", "Confirmed"),
selected = "Confirmed"),
sliderInput("pointsize", "Select the Point Size", min = 1, max = 5, value = 2, step = 0.5),
plotOutput("plot", width = "500px", height = "400px"))
)
server <- function(input, output, session) {
# the code to make the plot of iris data grouped by species
output$plot <- renderPlot({
ggplot(Kaggle, aes_string(x = input$x, y = input$y)) +
geom_bar(stat = "identity") + theme_light(base_size = 18)
})
# stop the app when we close it
session$onSessionEnded(stopApp)
}
shinyApp(ui, server)
ui <- dashboardPage(
dashboardHeader(title = "Kaggle App"),
dashboardSidebar(),
dashboardBody(
selectInput("y", "Select Y Variable", choices = c("Deaths", "Suspected", "Confirmed"),
selected = "Confirmed"),
sliderInput("pointsize", "Select the Point Size", min = 1, max = 5, value = 2, step = 0.5),
plotOutput("plot", width = "500px", height = "400px"))
)
server <- function(input, output, session) {
# the code to make the plot of iris data grouped by species
output$plot <- renderPlot({
ggplot(Kaggle, aes_string(x = "Country", y = input$y)) +
geom_bar(stat = "identity") + theme_light(base_size = 18)
})
# stop the app when we close it
session$onSessionEnded(stopApp)
}
shinyApp(ui, server)
ui <- dashboardPage(
dashboardHeader(title = "Kaggle App"),
dashboardSidebar(),
dashboardBody(
selectInput("y", "Select Y Variable", choices = c("Deaths", "Suspected", "Confirmed"),
selected = "Confirmed"),
sliderInput("pointsize", "Select the Point Size", min = 1, max = 5, value = 2, step = 0.5),
plotOutput("plot", width = "500px", height = "400px"))
)
server <- function(input, output, session) {
# the code to make the plot of iris data grouped by species
output$plot <- renderPlot({
ggplot(Kaggle, aes_string(x = "Country", y = input$y)) +
geom_bar(stat = "identity") +
coord_flip()+
theme_light(base_size = 18)
})
# stop the app when we close it
session$onSessionEnded(stopApp)
}
shinyApp(ui, server)
install.packages(c("ape", "rentrez", "seqinr"))
